#include <cstdio>
#include <cstdlib>
#include <cstring>

struct Node{
    int key;
    Node *next,*prev;
};

Node *nil;


void init(){
    nil = (Node *)malloc(sizeof(Node));
    nil->next = nil;
    nil->prev = nil;
}

/**
 * 
 * 
 * このコードは双方向リンクリストにおいて、新しいノード `x` をリストの**先頭**に挿入する処理を示しています。ここで使われている各変数にどのような値が入るのかについて、順を追って説明します。

まず、構造は以下のように仮定します：
- `nil` はダミーノード（番兵ノード）として、リストの始まりを示す役割を持っています。
- `x` は新しく追加するノードです。

### 挿入する前のリストの構造
```
+------+     +------+     +------+
| nil  |<--->| NodeA |<--->| NodeB | ...
+------+     +------+     +------+
```
- **`nil->next`** は `NodeA` を指しています（`NodeA` は現在の最初のノードです）。
- **`NodeA->prev`** は `nil` を指しています。

このリストに新しいノード `x` を挿入します。

### コードの動作
```c
x->key = key;
```
- 新しいノード `x` に渡された `key` の値を設定します。これにより、`x` のデータ部分に値が入ります。

```c
x->next = nil->next;
```
- 新しいノード `x` の `next` を、`nil->next` に設定します。
- **現在の `nil->next`** は `NodeA` を指しているため、ここで `x->next` も `NodeA` を指すようになります。
  - **結果**: `x->next` には元々リストの最初にあった `NodeA` へのポインタが設定されます。

```c
nil->next->prev = x;
```
- **`nil->next`** は `NodeA` を指しているため、この操作により `NodeA->prev` が `x` になります。
- これにより、元々先頭にあったノード（`NodeA`）の前のノードとして新しいノード `x` が設定されます。
  - **結果**: `NodeA->prev` に `x` が設定されます。

```c
nil->next = x;
```
- **`nil` の `next`** を新しいノード `x` に更新します。
- これにより、`nil` の次のノードが `x` となり、`x` がリストの新しい先頭になります。
  - **結果**: `nil->next` には `x` が設定されます。

```c
x->prev = nil;
```
- 新しいノード `x` の `prev` を `nil` に設定します。
- これにより、`x` の前のノードは `nil` となり、`x` がリストの最初の有効なノードとして正しく接続されます。
  - **結果**: `x->prev` には `nil` が設定されます。

### 挿入後のリストの構造
```
+------+     +-----+     +------+
| nil  |<--->|  x  |<--->| NodeA |
+------+     +-----+     +------+
```
- **`nil->next = x`** によって、`nil` の次のノードが `x` になります。
- **`x->next = NodeA`** によって、`x` の次のノードが元々の先頭ノード `NodeA` になります。
- **`x->prev = nil`** によって、`x` の前のノードが `nil` になります。
- **`NodeA->prev = x`** によって、`NodeA` の前のノードが `x` になります。

### まとめ
このコードは、リンクリストの先頭に新しいノード `x` を挿入する操作を行っています。具体的には、以下のように各変数に値が設定されています。

1. **`x->key = key`**：新しいノード `x` にデータ `key` を設定します。
2. **`x->next = nil->next`**：新しいノード `x` の次のノードとして、現在の先頭ノード（`NodeA`）を設定します。
3. **`nil->next->prev = x`**：元々の先頭ノード（`NodeA`）の前のノードを新しいノード `x` に設定します。
4. **`nil->next = x`**：`nil` の次のノードとして新しいノード `x` を設定します（`x` が新しい先頭になります）。
5. **`x->prev = nil`**：新しいノード `x` の前のノードを `nil` に設定します。

このようにすることで、新しいノード `x` がリストの先頭に正しく挿入され、双方向リンクリストとして整合性が保たれた状態になります。
 */

/**
 * 
 * 
 * 
+----------------------------------+
| nil->prev | nil->key | nil->next |
+----------------------------------+
これをまとめて
+------+       
| nil  | 
+------+      

 */

void insert(int key){
    Node *x = (Node *)malloc(sizeof(Node));
    x->key = key;
    x->next = nil->next;
    nil->next->prev = x;//nil->nextはNodeAでnil->next->prev = NodeA->prev
    nil->next = x;
    x->prev = nil;

}