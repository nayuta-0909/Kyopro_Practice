#include <stdio.h>
#define MAX 100000

// 配列Aとそのサイズnをグローバルに宣言
int A[MAX], n;

// パーティション関数: クイックソートの基礎部分で、配列を基準値で分割する
int partition(int p, int r){
    int x, i, j, t;
    x = A[r];  // 基準値 (ピボット) として配列の末尾の要素を選択
    i = p - 1; // iは基準値以下の要素の終端を示すインデックスを初期化

    // 配列の先頭 (p) から基準値の直前 (r-1) までをループ
    for(j = p; j < r; j++){
        // A[j] が基準値以下であれば、iをインクリメントし、A[i] と A[j] を交換
        if(A[j] <= x){
            i++;
            t = A[i];
            A[i] = A[j];
            A[j] = t;
        }
    }
    // 最後に基準値を適切な位置に移動する
    t = A[i + 1];
    A[i + 1] = A[r];
    A[r] = t;
    // 基準値の最終的な位置を返す
    return i + 1;
}

int main(){
    int i, q;
    // 配列のサイズを入力
    scanf("%d", &n);
    
    // 配列の要素を入力
    for(i = 0; i < n; i++){
        scanf("%d", &A[i]);
    }

    // 配列をパーティションに分割し、基準値の位置を取得
    q = partition(0, n - 1);

    // 分割後の配列を出力
    for(i = 0; i < n; i++){
        if(i) printf(" "); // 要素間にスペースを挿入
        if(i == q) printf("["); // 基準値の位置の前に "[" を挿入
        printf("%d", A[i]); // 要素を出力
        if(i == q) printf("]"); // 基準値の位置の後に "]" を挿入
    }
    printf("\n"); // 最後に改行を出力
    
    return 0;
}

